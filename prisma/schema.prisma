// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//= =================================================================================
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  avatar    String?
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  articles  Article[]
  comments  Comment[]

  @@map("users")
}

model Article {
  id        String    @id @default(uuid())
  title     String
  content   String    @db.Text
  image     String?
  authorId  String    @map("author_id")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  tags     ArticleTag[]
  comments Comment[]

  @@map("articles")
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  articles ArticleTag[]

  @@map("tags")
}

model ArticleTag {
  articleId String    @map("article_id")
  tagId     String    @map("tag_id")
  deletedAt DateTime? @map("deleted_at")

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model Comment {
  id        String    @id @default(uuid())
  content   String    @db.Text
  articleId String    @map("article_id")
  userId    String    @map("user_id")
  parentId  String?   @map("parent_id")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}
