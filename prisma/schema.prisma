// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//= =================================================================================
model User {
id           Int       @id @default(autoincrement())
name         String
email        String    @unique
password     String
avatar       String?   
isDeleted    Boolean   @default(false)
createdAt    DateTime  @default(now())
updatedAt    DateTime  @updatedAt
articles     Article[]
comments     Comment[]

@@map("users")
}

model Article {
id          Int           @id @default(autoincrement())
title       String
content     String        @db.Text
authorId    Int
isDeleted   Boolean       @default(false)
createdAt   DateTime      @default(now())
updatedAt   DateTime      @updatedAt

author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

tags        ArticleTag[]
comments    Comment[]

@@map("articles")
}

model Tag {
id           Int          @id @default(autoincrement())
name         String       @unique
isDeleted    Boolean      @default(false)
createdAt    DateTime     @default(now())

articles     ArticleTag[]

@@map("tags")
}

model ArticleTag {
articleId Int
tagId     Int
isDeleted Boolean @default(false)

article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

@@id([articleId, tagId])
@@map("article_tags")
}

model Comment {
id        Int       @id @default(autoincrement())
content   String    @db.Text
articleId Int
userId    Int
parentId  Int?
isDeleted Boolean   @default(false)
createdAt DateTime  @default(now())

article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
replies   Comment[] @relation("CommentReplies")

@@map("comments")
}